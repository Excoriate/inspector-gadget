name: 🚀 Release Binary

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.67.0

permissions:
  contents: write
  packages: write

jobs:
  create_release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: 🎉 Release ${{ github.ref }}
          draft: false
          prerelease: false

  build_and_upload:
    name: 🛠️ Build and Upload Release Asset
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: inspector-gadget-cli
            asset_name: inspector-gadget-cli-linux-amd64
          - os: windows-latest
            artifact_name: inspector-gadget-cli.exe
            asset_name: inspector-gadget-cli-windows-amd64.exe
          - os: macOS-latest
            artifact_name: inspector-gadget-cli
            asset_name: inspector-gadget-cli-macos-amd64
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: 📦 Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libxcb-randr0-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-xtest0-dev libasound2-dev libpcap-dev
          echo "LD_LIBRARY_PATH=/usr/local/lib:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: 🔨 Build project
        run: |
          cargo build --release --verbose
        env:
          RUSTFLAGS: "-C link-arg=-Wl,-rpath,/usr/lib/x86_64-linux-gnu"
          PKG_CONFIG_PATH: "/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH"

      - name: 📤 Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./target/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  update_readme:
    name: 📝 Update README
    needs: [create_release, build_and_upload]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔄 Update README with new version
        run: |
          sed -i 's/v[0-9]\+\.[0-9]\+\.[0-9]\+/${{ github.ref_name }}/g' README.md
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update README for ${{ github.ref_name }}"
          git push

      - name: 🎉 Release Success Notification
        if: success()
        run: echo "::notice::🎊 Successfully released new version and updated README!"

      - name: ❌ Release Failure Notification
        if: failure()
        run: echo "::error::💥 Failed to release new version or update README. Please check the logs for details."